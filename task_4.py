# –ó–∞–¥–∞–Ω–∏–µ No4
# üìå –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞: ‚Äú1-–∏ÃÜ —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù, ‚Äú3-—è —Å—Ä–µ–¥–∞ –º–∞—è‚Äù –∏ —Ç.–ø.
# üìå –ü—Ä–µ–æ–±—Ä–∞–∑—É–∏ÃÜ—Ç–µ –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.
# üìå –õ–æ–≥–∏—Ä—É–∏ÃÜ—Ç–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.
import logging
from datetime import datetime, date

START = 1
WEEK = 7
FORMAT ='{funcName} -{asctime} -{msg}'

logging.basicConfig(level=logging.ERROR, filename='errors.log', filemode='a', encoding='utf-8', format=FORMAT, style='{')
log = logging.getLogger(__name__)


def get_date_from_text(text: str):
    year = datetime.now().year
    ru_days = {'–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0, '–≤—Ç–æ—Ä–Ω–∏–∫': 1, '—Å—Ä–µ–¥–∞': 2, '—á–µ—Ç–≤–µ—Ä–≥': 3, '–ø—è—Ç–Ω–∏—Ü–∞': 4, 'c—É–±–±–æ—Ç–∞': 5, '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6}
    ru_months = {'—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4, '–º–∞—è': 5, '–∏—é–Ω—è': 6, '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8,
                 '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12}
    try:
        day_count, *_, day_ru, mounth_ru = text.split(' ')
    except ValueError:
        log.error(f"Invalid input {text}")
        exit(1)
    try:
        day_int = ru_days[day_ru]
    except KeyError:
        log.error(f"Invalid input {text}: name of the day")
        exit(1)
    try:
        month_int = ru_months[mounth_ru]
    except KeyError:
        log.error(f"Invalid input {text}: name of the month")
        exit(1)
    try:
        day_count_int = int(day_count[0])
    except ValueError:
        log.error(f"Invalid input {text}: count of the day")
        exit(1)
    start = date(year, month_int, START)
    if start.weekday() == day_int:
        try:
            return date(year, month_int, (START + WEEK * day_count_int - WEEK))
        except ValueError:
            log.error(f"Invalid input {text}: count of the day")
            exit(1)
    elif start.weekday() < day_int:
        try:
            return date(year, month_int, (day_int - start.weekday() + WEEK * day_count_int - WEEK + 1))
        except ValueError:
            log.error(f"Invalid input {text}: count of the day")
            exit(1)
    elif start.weekday() > day_int:
        try:
            return date(year, month_int, (start.weekday() - day_int + WEEK * day_count_int - 1))
        except ValueError:
            log.error(f"Invalid input {text}: count of the day")
            exit(1)


if __name__ == '__main__':
    print(get_date_from_text("1 - –∏ÃÜ —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è"))
    print(get_date_from_text("9- —è c—É–±–±–æ—Ç–∞ –º–∞—è"))
