# –ó–∞–¥–∞–Ω–∏–µ No5
# üìå –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É 4.
# üìå –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–∏ÃÜ —Å—Ç—Ä–æ–∫–∏.
# üìå –ü—Ä–∏ —ç—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–µ—Ä–µÃà—Ç—Å—è –ø–µ—Ä–≤—ã–∏ÃÜ –≤
# –º–µ—Å—è—Ü–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —Ç–µ–∫—É—â–∏–∏ÃÜ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏/–∏–ª–∏ —Ç–µ–∫—É—â–∏–∏ÃÜ –º–µ—Å—è—Ü.
# üìå *–ù–∞—É—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞, –Ω–æ –∏ —á–∏—Å–ª–æ–≤—ã–µ,
# —Ç.–µ –Ω–µ –º–∞—è, –∞ 5.

import argparse
import logging
from datetime import datetime, date

START = 1
WEEK = 7
FORMAT = '{funcName} -{asctime} -{msg}'

logging.basicConfig(level=logging.ERROR, filename='errors.log', filemode='a', encoding='utf-8', format=FORMAT,
                    style='{')
log = logging.getLogger(__name__)


def get_date_from_text(*args):
    text = args
    year = datetime.now().year
    ru_days = {'–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0, '–≤—Ç–æ—Ä–Ω–∏–∫': 1, '—Å—Ä–µ–¥–∞': 2, '—á–µ—Ç–≤–µ—Ä–≥': 3, '–ø—è—Ç–Ω–∏—Ü–∞': 4, 'c—É–±–±–æ—Ç–∞': 5, '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6}
    ru_months = {'—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4, '–º–∞—è': 5, '–∏—é–Ω—è': 6, '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8,
                 '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12}
    try:
        day_count, *_, day_ru, mounth_ru = args
    except ValueError:
        try:
            day_count, *_, day_ru, mounth_ru = args[0].split()
        except ValueError:
            log.error(f"Invalid input {text}")
            exit(1)

    try:
        day_int = ru_days[day_ru]
    except KeyError:
        try:
            day_int = int(day_ru)
        except ValueError:
            log.error(f"Invalid input {text}: name of the day")
            exit(1)
    try:
        month_int = ru_months[mounth_ru]
    except KeyError:
        try:
            month_int = int(mounth_ru)
        except ValueError:
            log.error(f"Invalid input {text}: name of the month")
            exit(1)
    try:
        day_count_int = int(day_count[0])
    except TypeError:
        try:
            day_count_int = int(day_count)
        except ValueError:
            log.error(f"Invalid input {text}: count of the day")
            exit(1)

    start = date(year, month_int, START)
    if start.weekday() == day_int:
        try:
            return date(year, month_int, (START + WEEK * day_count_int - WEEK))
        except ValueError:
            log.error(f"Invalid input {text}: count of the day")
            exit(1)
    elif start.weekday() < day_int:
        try:
            return date(year, month_int, (day_int - start.weekday() + WEEK * day_count_int - WEEK + 1))
        except ValueError:
            log.error(f"Invalid input {text}: count of the day")
            exit(1)
    elif start.weekday() > day_int:
        try:
            return date(year, month_int, (start.weekday() - day_int + WEEK * day_count_int - 1))
        except ValueError:
            log.error(f"Invalid input {text}: count of the day")
            exit(1)


if __name__ == '__main__':
    # print(get_date_from_text("1-–∏ÃÜ —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è"))
    parser = argparse.ArgumentParser(description='getting date from text')
    parser.add_argument('param', metavar='text',
                        nargs='*', default=(1, datetime.now().weekday(), datetime.now().month),
                        help='text like "1-–∏ÃÜ —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è" or use digits instead ')
    args_in = parser.parse_args()
    print(get_date_from_text(*args_in.param))
